/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hallock.tfe.dsktp.gui;

import java.awt.Color;
import java.io.IOException;
import java.net.Socket;
import java.util.LinkedList;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.ListModel;

import org.hallock.tfe.client.ClientKeyListener;
import org.hallock.tfe.client.GameClient;
import org.hallock.tfe.cmn.game.GameOptions;
import org.hallock.tfe.cmn.game.PossiblePlayerActions;
import org.hallock.tfe.cmn.sys.Constants;
import org.hallock.tfe.cmn.util.Connection;
import org.hallock.tfe.cmn.util.Json;
import org.hallock.tfe.cmn.util.Utils;
import org.hallock.tfe.msg.GCClientMessage;
import org.hallock.tfe.msg.GSPlayerAction;
import org.hallock.tfe.msg.LCLobbyClientMessage;
import org.hallock.tfe.msg.LSCreateLobby;
import org.hallock.tfe.msg.LSLaunch;
import org.hallock.tfe.msg.LSListLobbiesMessage;
import org.hallock.tfe.msg.LSReadyMessage;
import org.hallock.tfe.msg.LSRefreshMessage;
import org.hallock.tfe.msg.LSUpdateOptions;
import org.hallock.tfe.msg.Message;
import org.hallock.tfe.serve.Lobby.LobbyInfo;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;

public class LobbyViewer extends javax.swing.JPanel {
    
    LobbyConnector somethingToChangeTheOptions;
    DefaultListModel<LobbyDisplay> lobbyListModel = new DefaultListModel<>();
    Connection connection;
    GameOptions options;
    
    private static final int PLAYER_WIDTH = 750;
    private static final int PLAYER_HEIGHT = 50;
    
    boolean admin;
    boolean allReady;
    GameClient client;
    
    /**
     * Creates new form LobbyViewer
     */
    public LobbyViewer() {
        initComponents();
        jPanel1.setLayout(null);
        setLobby(false, null);
    }
    
    private ListModel<LobbyDisplay> getListModel()
    {
        return lobbyListModel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(300);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Lobbies:"));

        jTextField1.setText("localhost");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Server:");

        jList1.setModel(getListModel());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList1);

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Launch New");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Join");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("CurrentLobby"));

        jButton1.setText("Launch");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Ready");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Host:");

        jLabel5.setText("jLabel5");

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Game Options"));
        jPanel5.setPreferredSize(new java.awt.Dimension(200, 150));

        jLabel1.setText("Number of players:");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));
        jSpinner1.setToolTipText("");
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
	public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 1));
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
	public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 1));
        jSpinner3.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
	public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner3StateChanged(evt);
            }
        });

        jLabel2.setText("Number of rows:");

        jLabel6.setText("Number of columns:");

        jButton5.setText("Send");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(295, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton5))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel5);

        jSplitPane2.setTopComponent(jScrollPane3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Players")));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 751, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane2.setRightComponent(jPanel4);

        jButton4.setText("Refresh");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            @Override
	public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
	    sendReadyUpdate();
	    updateUi();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        launch();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // create a new lobby...
        new Thread(new Runnable() {
            @Override
            public void run() {
                createConnection(new Runnable() {

			@Override
			public void run()
			{
				try
				{
					connection.sendMessageAndFlush(new LSCreateLobby());
					connection.sendMessageAndFlush(new LSListLobbiesMessage());
				}
				catch (IOException e)
				{
					e.printStackTrace();
				}
			}});
            }
        }).start();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        optionsChanged();
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        optionsChanged();
    }//GEN-LAST:event_jSpinner2StateChanged

    private void jSpinner3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner3StateChanged
        optionsChanged();
    }//GEN-LAST:event_jSpinner3StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	    	//reconnected to the current host
		String ip = jTextField1.getText();
		int port = Constants.LOBBY_PORT;
		
		if (connection != null)
		{
			// check that it is the same lobby server...
			try
			{
				connection.sendMessageAndFlush(new LSListLobbiesMessage());
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
			return;
		}

		try (Socket socket = new Socket(ip, port);
			JsonGenerator generator = Json.createOpenedGenerator(socket.getOutputStream());
			JsonParser parser = Json.createParser(socket.getInputStream());)
		{
			Connection connection = new Connection(socket, generator, parser);
			connection.readOpen();
			
			connection.sendMessageAndFlush(new LSListLobbiesMessage());
			connection.sendClose();

			Message message = connection.readMessage();
                        if (!(message instanceof LCLobbyClientMessage))
			{
				System.out.println("Ignoring " + message);
			}
			LCLobbyClientMessage msg = (LCLobbyClientMessage) message;
			msg.perform(this);
		}
		catch (Throwable e)
		{
			e.printStackTrace();
		}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try
	{
        	if (connection != null)
        		connection.sendMessageAndFlush(new LSRefreshMessage());
	}
	catch (IOException e)
	{
		e.printStackTrace();
	}
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try
	{
        	if (connection != null)
        		connection.sendMessageAndFlush(new LSUpdateOptions(createOptions()));
	}
	catch (IOException e)
	{
		e.printStackTrace();
	}
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
		final LobbyDisplay display = jList1.getSelectedValue();
		if (display == null)
			return;
		if (connection != null)
			try
			{
				connection.sendClose();
			}
			catch (IOException e1)
			{
				e1.printStackTrace();
			}
		new Thread(new Runnable()
		{
			@Override
			public void run()
			{
				createConnection(new Runnable()
				{
					@Override
					public void run()
					{
						try
						{
							connection.sendMessageAndFlush(new LSJoinLobby(display.id));
						}
						catch (IOException e)
						{
							e.printStackTrace();
						}
					}
				});
			}
		}).start();
    }//GEN-LAST:event_jButton6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<LobbyDisplay> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void updateUi() {
        boolean isReady = jCheckBox1.isSelected();
        
        boolean allAreReady = isReady && false; // each player is ready...
        jButton1.setEnabled(somethingToChangeTheOptions != null && allAreReady);
        
        jSpinner1.setEnabled(somethingToChangeTheOptions != null);
        jSpinner2.setEnabled(somethingToChangeTheOptions != null);
        jSpinner3.setEnabled(somethingToChangeTheOptions != null);
        jButton1.setEnabled(admin && allReady);
    }
    
    private void optionsChanged() {
        if (connection == null)
        {
            return;
        }
        System.out.println("Would update options...");
	jButton5.setEnabled(true);
    }
    

    private GameOptions createOptions()
    {
        GameOptions options = null;
        if (this.options == null)
        	options = new GameOptions(this.options);
        else
        	options = new GameOptions();
        
        options.numberOfPlayers = 	((Number) jSpinner1.getValue()).intValue();
        options.numRows = 		((Number) jSpinner2.getValue()).intValue();
        options.numCols = 		((Number) jSpinner3.getValue()).intValue();
        
        return options;
    }

	private void launch()
	{
		if (connection == null)
			return;
		try
		{
			connection.sendMessageAndFlush(new LSLaunch());
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public void setLobby(boolean isAdmin, LobbyInfo lobby)
	{
		jButton5.setEnabled(false);
		if (lobby == null)
		{
			allReady = false;
			admin = false;
			jSpinner1.setEnabled(false);
			jSpinner2.setEnabled(false);
			jSpinner3.setEnabled(false);
			jButton4.setEnabled(false);
			jCheckBox1.setEnabled(false);
			jButton1.setEnabled(false);
			// set everything to defaults...
			return;
		}

		admin = isAdmin;
		allReady = lobby.allReady;
		

		jSpinner1.setEnabled(admin);
		jSpinner2.setEnabled(admin);
		jSpinner3.setEnabled(admin);
		jButton4.setEnabled(admin);
		jButton1.setEnabled(admin && allReady);
		jButton5.setEnabled(admin);
		jCheckBox1.setEnabled(true);

		options = lobby.options;
		jSpinner1.setValue(lobby.options.numberOfPlayers);
		jSpinner2.setValue(lobby.options.numRows);
		jSpinner3.setValue(lobby.options.numCols);

		LobbyPlayer[] players = new LobbyPlayer[lobby.players.length];
		for (int i = 0; i < players.length; i++)
			players[i] = new LobbyPlayer(lobby.players[i], connection, isAdmin);

		jPanel1.removeAll();
		Utils.attachVertically(jPanel1, players, 50);

//		int cY = 0;
//		jPanel1.removeAll();
//		for (PlayerInfo p : lobby.players)
//		{
//			LobbyPlayer player = new LobbyPlayer(p, connection, isAdmin);
//			player.setBounds(0, cY, PLAYER_WIDTH, PLAYER_HEIGHT);
//			cY += PLAYER_HEIGHT;
//			jPanel1.add(player);
//		}
//
//		jPanel1.setPreferredSize(new Dimension(PLAYER_WIDTH, cY));
		jPanel1.repaint();
	}
    
    
	private void createConnection(Runnable runThisAfter)
	{
		String ip = jTextField1.getText();
		int port = Constants.LOBBY_PORT;
		
		// remove old connection

		try (Socket socket = new Socket(ip, port);
			JsonGenerator generator = Json.createOpenedGenerator(socket.getOutputStream());
			JsonParser parser = Json.createParser(socket.getInputStream());)
		{
			connection = new Connection(socket, generator, parser);
			connection.readOpen();

			if (runThisAfter != null)
				runThisAfter.run();

			Message message;
			while ((message = connection.readMessage()) != null)
			{
				if (message instanceof LCLobbyClientMessage)
				{
					LCLobbyClientMessage msg = (LCLobbyClientMessage) message;
					msg.perform(this);
				}
				else if (message instanceof GCClientMessage && client != null)
				{
					GCClientMessage msg = (GCClientMessage) message;
					msg.perform(client);
				}
				else
				{
					System.out.println("Ignoring " + message);
                                        continue;
				}
			}

			connection.sendClose();
		}
		catch (Throwable e)
		{
			e.printStackTrace();
		}
		finally
		{
			connection = null;
		}
	}

	
	private void sendReadyUpdate()
	{
		if (connection == null)
		{
			return;
		}
		try
		{
			connection.sendMessageAndFlush(new LSReadyMessage(jCheckBox1.isSelected()));
		}
		catch (IOException ex)
		{
			ex.printStackTrace();
		}
	}

	private static final class LobbyDisplay
	{
		String name;
		String id;

		public LobbyDisplay(String name, String id)
		{
			this.name = name;
			this.id = id;
		}
		
		@Override
		public String toString()
		{
			return name;
		}
	}

	public void setLobbies(LinkedList<LobbyInfo> lobbies)
	{
		lobbyListModel.removeAllElements();
		for (LobbyInfo info : lobbies)
		{
			lobbyListModel.addElement(new LobbyDisplay(info.getName(), info.getId()));
		}
	}

	public void startGame() throws IOException
	{
		TileView myself = new TileView();
		TileView other  = new TileView();
		
		JFrame frame = new JFrame();
		frame.setBounds(50, 50, 500, 500);
		frame.setTitle("Viewer");

		// This will be the list of available evil actions...
		JPanel left = new JPanel();
		left.setBackground(Color.black);
		
		JSplitPane inner = new JSplitPane();
		inner.setLeftComponent(other);
		inner.setRightComponent(myself);
		inner.setDividerLocation(200);

		JSplitPane outer = new JSplitPane();
		outer.setLeftComponent(left);
		outer.setRightComponent(inner);
		
		Utils.attach(frame.getContentPane(), outer);
		
		frame.setVisible(true);

		ClientKeyListener listener = new ClientKeyListener(connection);
		other.addKeyListener(listener);
		other.setFocusable(true);
		other.requestFocus();

		client = new GameClient();
		client.add(myself);
		client.add(other);

		connection.sendMessageAndFlush(new GSPlayerAction(PossiblePlayerActions.ShowAllTileBoards));
	}
}
